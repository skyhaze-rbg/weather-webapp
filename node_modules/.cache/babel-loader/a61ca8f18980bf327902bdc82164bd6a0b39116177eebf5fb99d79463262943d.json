{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import ReactAnimatedWeather from \"react-animated-weather\";\n\n// function Forecast({ weather }) {\n//   const { data } = weather;\n//   const [forecastData, setForecastData] = useState([]);\n//   const [isCelsius, setIsCelsius] = useState(true); // Track temperature unit\n\n//   useEffect(() => {\n//     const fetchForecastData = async () => {\n//       const apiKey = \"b03a640e5ef6980o4da35b006t5f2942\";\n//       const url = `https://api.shecodes.io/weather/v1/forecast?query=${data.city}&key=${apiKey}&units=metric`;\n\n//       try {\n//         const response = await axios.get(url);\n//         setForecastData(response.data.daily);\n//       } catch (error) {\n//         console.log(\"Error fetching forecast data:\", error);\n//       }\n//     };\n\n//     fetchForecastData();\n//   }, [data.city]);\n\n//   const formatDay = (dateString) => {\n//     const options = { weekday: \"short\" };\n//     const date = new Date(dateString * 1000);\n//     return date.toLocaleDateString(\"en-US\", options);\n//   };\n\n//   const getCurrentDate = () => {\n//     const options = {\n//       weekday: \"long\",\n//       day: \"numeric\",\n//       month: \"long\",\n//       year: \"numeric\",\n//     };\n//     const currentDate = new Date().toLocaleDateString(\"en-US\", options);\n//     return currentDate;\n//   };\n\n//   const toggleTemperatureUnit = () => {\n//     setIsCelsius((prevState) => !prevState);\n//   };\n\n//   const convertToCelsius = (temperature) => {\n//     return Math.round((temperature - 32) * (5 / 9));\n//   };\n\n//   const convertToFahrenheit = (temperature) => {\n//     return Math.round((temperature * 9) / 5 + 32);\n//   };\n\n//   const renderTemperature = (temperature) => {\n//     if (isCelsius) {\n//       return Math.round(temperature);\n//     } else {\n//       return convertToFahrenheit(temperature);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"city-name\">\n//         <h2>\n//           {data.city}, <span>{data.country}</span>\n//         </h2>\n//       </div>\n//       <div className=\"date\">\n//         <span>{getCurrentDate()}</span>\n//       </div>\n//       <div className=\"temp\">\n//         {data.condition.icon_url && (\n//           <img\n//             src={data.condition.icon_url}\n//             alt={data.condition.description}\n//             className=\"temp-icon\"\n//           />\n//         )}\n//         {renderTemperature(data.temperature.current)}\n//         <sup className=\"temp-deg\" onClick={toggleTemperatureUnit}>\n//           {isCelsius ? \"°C\" : \"°F\"} | {isCelsius ? \"°F\" : \"°C\"}\n//         </sup>\n//       </div>\n//       <p className=\"weather-des\">{data.condition.description}</p>\n//       <div className=\"weather-info\">\n//         <div className=\"col\">\n//           <ReactAnimatedWeather icon=\"WIND\" size=\"40\" />\n//           <div>\n//             <p className=\"wind\">{data.wind.speed}m/s</p>\n//             <p>Wind speed</p>\n//           </div>\n//         </div>\n//         <div className=\"col\">\n//           <ReactAnimatedWeather icon=\"RAIN\" size=\"40\" />\n//           <div>\n//             <p className=\"humidity\">{data.temperature.humidity}%</p>\n//             <p>Humidity</p>\n//           </div>\n//         </div>\n//       </div>\n//       <div className=\"forecast\">\n//         <h3>5-Day Forecast:</h3>\n//         <div className=\"forecast-container\">\n//           {forecastData &&\n//             forecastData.slice(0, 5).map((day) => (\n//               <div className=\"day\" key={day.time}>\n//                 <p className=\"day-name\">{formatDay(day.time)}</p>\n//                 {day.condition.icon_url && (\n//                   <img\n//                     className=\"day-icon\"\n//                     src={day.condition.icon_url}\n//                     alt={day.condition.description}\n//                   />\n//                 )}\n//                 <p className=\"day-temperature\">\n//                   {Math.round(day.temperature.minimum)}°/{\" \"}\n//                   <span>{Math.round(day.temperature.maximum)}°</span>\n//                 </p>\n//               </div>\n//             ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Forecast;","map":{"version":3,"names":[],"sources":["/Users/akashgurung/Downloads/React-Weather-App-main/src/components/Forecast.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import ReactAnimatedWeather from \"react-animated-weather\";\r\n\r\n// function Forecast({ weather }) {\r\n//   const { data } = weather;\r\n//   const [forecastData, setForecastData] = useState([]);\r\n//   const [isCelsius, setIsCelsius] = useState(true); // Track temperature unit\r\n\r\n//   useEffect(() => {\r\n//     const fetchForecastData = async () => {\r\n//       const apiKey = \"b03a640e5ef6980o4da35b006t5f2942\";\r\n//       const url = `https://api.shecodes.io/weather/v1/forecast?query=${data.city}&key=${apiKey}&units=metric`;\r\n\r\n//       try {\r\n//         const response = await axios.get(url);\r\n//         setForecastData(response.data.daily);\r\n//       } catch (error) {\r\n//         console.log(\"Error fetching forecast data:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchForecastData();\r\n//   }, [data.city]);\r\n\r\n//   const formatDay = (dateString) => {\r\n//     const options = { weekday: \"short\" };\r\n//     const date = new Date(dateString * 1000);\r\n//     return date.toLocaleDateString(\"en-US\", options);\r\n//   };\r\n\r\n//   const getCurrentDate = () => {\r\n//     const options = {\r\n//       weekday: \"long\",\r\n//       day: \"numeric\",\r\n//       month: \"long\",\r\n//       year: \"numeric\",\r\n//     };\r\n//     const currentDate = new Date().toLocaleDateString(\"en-US\", options);\r\n//     return currentDate;\r\n//   };\r\n\r\n//   const toggleTemperatureUnit = () => {\r\n//     setIsCelsius((prevState) => !prevState);\r\n//   };\r\n\r\n//   const convertToCelsius = (temperature) => {\r\n//     return Math.round((temperature - 32) * (5 / 9));\r\n//   };\r\n\r\n//   const convertToFahrenheit = (temperature) => {\r\n//     return Math.round((temperature * 9) / 5 + 32);\r\n//   };\r\n\r\n//   const renderTemperature = (temperature) => {\r\n//     if (isCelsius) {\r\n//       return Math.round(temperature);\r\n//     } else {\r\n//       return convertToFahrenheit(temperature);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"city-name\">\r\n//         <h2>\r\n//           {data.city}, <span>{data.country}</span>\r\n//         </h2>\r\n//       </div>\r\n//       <div className=\"date\">\r\n//         <span>{getCurrentDate()}</span>\r\n//       </div>\r\n//       <div className=\"temp\">\r\n//         {data.condition.icon_url && (\r\n//           <img\r\n//             src={data.condition.icon_url}\r\n//             alt={data.condition.description}\r\n//             className=\"temp-icon\"\r\n//           />\r\n//         )}\r\n//         {renderTemperature(data.temperature.current)}\r\n//         <sup className=\"temp-deg\" onClick={toggleTemperatureUnit}>\r\n//           {isCelsius ? \"°C\" : \"°F\"} | {isCelsius ? \"°F\" : \"°C\"}\r\n//         </sup>\r\n//       </div>\r\n//       <p className=\"weather-des\">{data.condition.description}</p>\r\n//       <div className=\"weather-info\">\r\n//         <div className=\"col\">\r\n//           <ReactAnimatedWeather icon=\"WIND\" size=\"40\" />\r\n//           <div>\r\n//             <p className=\"wind\">{data.wind.speed}m/s</p>\r\n//             <p>Wind speed</p>\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"col\">\r\n//           <ReactAnimatedWeather icon=\"RAIN\" size=\"40\" />\r\n//           <div>\r\n//             <p className=\"humidity\">{data.temperature.humidity}%</p>\r\n//             <p>Humidity</p>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//       <div className=\"forecast\">\r\n//         <h3>5-Day Forecast:</h3>\r\n//         <div className=\"forecast-container\">\r\n//           {forecastData &&\r\n//             forecastData.slice(0, 5).map((day) => (\r\n//               <div className=\"day\" key={day.time}>\r\n//                 <p className=\"day-name\">{formatDay(day.time)}</p>\r\n//                 {day.condition.icon_url && (\r\n//                   <img\r\n//                     className=\"day-icon\"\r\n//                     src={day.condition.icon_url}\r\n//                     alt={day.condition.description}\r\n//                   />\r\n//                 )}\r\n//                 <p className=\"day-temperature\">\r\n//                   {Math.round(day.temperature.minimum)}°/{\" \"}\r\n//                   <span>{Math.round(day.temperature.maximum)}°</span>\r\n//                 </p>\r\n//               </div>\r\n//             ))}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Forecast;\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}